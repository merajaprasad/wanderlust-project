@Library('Shared') _
pipeline {
    agent any

    environment {
        SCANNER_HOME= tool 'sonar-scanner'
        DOCKER_USR = 'merajaprasd'
        DOCKERHUB_CREDENTIALS = credentials('dockerhub')
    }
    parameters{
      string(name: 'FRONTEND_IMAGE_TAG', defaultValue: '', description: 'tagging frontend docker image')
      string(name: 'BACKEND_IMAGE_TAG', defaultValue: '', description: 'tagging backend docker image')
    }

    stages{
        stage('Workspace Cleanup') {
            steps {
                cleanWs()
            }
        }

        stage('Git: Code Checkout') {
            steps {
                git branch: 'main', url: 'https://github.com/merajaprasad/wanderlust-project.git'
            }
        }

        stage('Trivy: Filesystem scan') {
            steps {
                trivy_fs_scan()
            }
        }

        stage('OWASP: DP-Check') {
            steps {
                dependencyCheck additionalArguments: '--scan ./ --format XML ', odcInstallation: 'DP-Check'
                dependencyCheckPublisher pattern: '**/dependency-check-report.xml'
            }
        }

        stage('SonarQube: Code Analysis') {
            steps {
               sonarqube_code_analysis("sonar-server","wonderlust","wonderlust")
            }
        }

        stage('SonarQube: Code Quality Gates') {
            steps {
                script {
                    sonarqube_quality_gate()
                }               
            }
        }

        stage('Docker: Build and Tag') {
            steps {
                dir('frontend') {
                    docker_image_build("${DOCKER_USR}","wonderlust-front","${params.FRONTEND_IMAGE_TAG}")
                }
                dir('backend') {
                    docker_image_build("${DOCKER_USR}","wonderlust-back","${params.BACKEND_IMAGE_TAG}")
                }                
            }
        }

        stage('Trivy: Image Scan') {
            steps {
                trivy_image_scan("${DOCKER_USR}","wonderlust-front","${params.FRONTEND_IMAGE_TAG}")
                trivy_image_scan("${DOCKER_USR}","wonderlust-back","${params.BACKEND_IMAGE_TAG}")
            }
        }

        stage('Docker: Push Image') {
            steps {
                sh "echo $DOCKERHUB_CREDENTIALS_PSW | docker login -u $DOCKERHUB_CREDENTIALS_USR --password-stdin"
                sh "docker push ${DOCKER_USR}/wonderlust-front:${params.FRONTEND_IMAGE_TAG}"
                sh "docker push ${DOCKER_USR}/wonderlust-back:${params.BACKEND_IMAGE_TAG}"
            }
        }
        
        stage('Kubernetes: Updating Manifest file') {
            steps {
                script {
                    dir('kubernetes') {
                        sh """
                            sed -i "s/wonderlust-front:*/wonderlust-front:${params.FRONTEND_IMAGE_TAG}/" frontend.yaml
                            sed -i "s/wonderlust-back:*/wonderlust-back:${params.BACKEND_IMAGE_TAG}/" backend.yaml
                        """
                    }
                }
            }
        }
        stage('Git: Push to Github') {
            steps {
                script {
                    withCredentials([gitUsernamePassword(credentialsId: 'github-cred', gitToolName: 'Default')]) {
                        sh """
                            git config --global user.name "merajaprasad"
                            git config --global user.email "prasad.rp731@gmail.com"

                            git add .
                            git commit -m "updating image tag in deploymentfile"
                            git push https://github.com/merajaprasad/wanderlust-project.git main
                        """
                    }
                }
            }
        }
    }
    post {
        success {
            script {
                emailext attachLog: true,
                from: 'rajaprasad.rp731@gmail.com',
                subject: "Wanderlust Application has been updated and deployed - '${currentBuild.result}'",
                body: """
                    <html>
                    <body>
                        <div style="background-color: #FFA07A; padding: 10px; margin-bottom: 10px;">
                            <p style="color: black; font-weight: bold;">Project: ${env.JOB_NAME}</p>
                        </div>
                        <div style="background-color: #90EE90; padding: 10px; margin-bottom: 10px;">
                            <p style="color: black; font-weight: bold;">Build Number: ${env.BUILD_NUMBER}</p>
                        </div>
                        <div style="background-color: #87CEEB; padding: 10px; margin-bottom: 10px;">
                            <p style="color: black; font-weight: bold;">URL: ${env.BUILD_URL}</p>
                        </div>
                    </body>
                    </html>
                """,
                to: 'rajaprasad.rp731@gmail.com',
                attachmentsPattern: 'fs.html,image.html',
                mimeType: 'text/html'
            }
        }
        failure {
            script {
                emailext attachLog: true,
                from: 'rajaprasad.rp731@gmail.com',
                subject: "Wanderlust Application build failed - '${currentBuild.result}'",
                body: """
                    <html>
                    <body>
                        <div style="background-color: #FFA07A; padding: 10px; margin-bottom: 10px;">
                            <p style="color: black; font-weight: bold;">Project: ${env.JOB_NAME}</p>
                        </div>
                        <div style="background-color: #90EE90; padding: 10px; margin-bottom: 10px;">
                            <p style="color: black; font-weight: bold;">Build Number: ${env.BUILD_NUMBER}</p>
                        </div>
                    </body>
                    </html>
                """,
                to: 'rajaprasad.rp731@gmail.com',
                attachmentsPattern: 'fs.html,image.html',
                mimeType: 'text/html'
            }
        }
    }
}


